#!/bin/bash
set -ex
# shellcheck source=./ci/test/common
source ./common

delete_dir /tmp/gha-demo
git clone https://github.com/cplee/github-actions-demo /tmp/gha-demo
pushd /tmp/gha-demo
PHONY_SECRET=phony popper run --debug --runtime "$RUNTIME"
popd

# test with an action defined on the root of the repo
delete_dir /tmp/npm
git clone https://github.com/actions/npm /tmp/npm
pushd /tmp/npm
DOCKER_USERNAME=foo DOCKER_PASSWORD=bar popper run --runtime "$RUNTIME" "Shell Lint"
popd

# test with a remote action defined on the root of the repo
init_test_repo
cd $test_repo_path
cat <<EOF > main.workflow
workflow "action on root folder" {
  resolves = "test"
}
action "test" {
  uses = "popperized/ansible@master"
  args = "--version"
  secrets = ["ANSIBLE_SSH_KEY_DATA"]
}
EOF

ANSIBLE_SSH_KEY_DATA="$(echo 'dummydata' | base64)" popper run --runtime "$RUNTIME"

# test with actions hosted on gitlab
cd $test_repo_path
cat <<EOF > main.workflow
workflow "clone" {
  resolves = "test"
}

action "dependency four" {
  uses = "docker://busybox"
  runs = ["ls", "-ltr"]
}

action "dependency three" {
  uses = "docker://busybox"
  runs = ["ls", "-ltr"]
}

action "dependency two" {
  needs = ["dependency three", "dependency four"]
  uses = "docker://busybox"
  runs = ["ls", "-ltr"]
}

action "dependency one" {
  needs = ["dependency two"]
  uses = "docker://busybox"
  runs = ["ls", "-ltr"]
}

action "test" {
  needs = ["dependency one"]
  uses = "https://gitlab.com/barbaragd/action-test@master"
}
EOF

popper run --dry-run --runtime "$RUNTIME" > output
grep -q "test" output
grep -q "dependency one" output
grep -q "dependency two" output
grep -q "dependency three" output
grep -q "dependency four" output

# test --with-dependencies flag
popper run --dry-run --runtime "$RUNTIME" test > output
grep -q "test" output
popper run --dry-run --with-dependencies --runtime "$RUNTIME" test > output
grep -q "test" output
grep -q "dependency one" output
grep -q "dependency two" output
grep -q "dependency three" output
grep -q "dependency four" output
popper run --dry-run --with-dependencies --runtime "$RUNTIME" 'dependency one' > output
grep -q "dependency one" output
grep -q "dependency two" output
grep -q "dependency three" output
grep -q "dependency four" output

cat <<EOF > main.workflow
workflow "wf" {
  resolves = "d"
}

action "a1" {
  uses = "sh"
  args = "ls"
}

action "a2" {
  uses = "sh"
  args = "ls"
}

action "b" {
  needs = ["a1", "a2"]
  uses = "sh"
  args = "ls"
}

action "c" {
  needs = ["a1", "a2"]
  uses = "sh"
  args = "ls"
}

action "d" {
  needs = ["b", "c"]
  uses = "sh"
  args = "ls"
}
EOF

! popper run --dry-run --with-dependencies --runtime "$RUNTIME"
popper run --dry-run --with-dependencies --runtime "$RUNTIME" a1 > output
grep -q "a1" output
popper run --dry-run --with-dependencies --runtime "$RUNTIME" a2 > output
grep -q "a2" output
popper run --dry-run --with-dependencies --runtime "$RUNTIME" b > output 
grep -q "a1"  output
grep -q "a2" output 
grep -q "b" output
popper run --dry-run --with-dependencies --runtime "$RUNTIME" c > output
grep -q "a1" output 
grep -q "a2" output 
grep -q "c" output
popper run --dry-run --with-dependencies --runtime "$RUNTIME" d > output 
grep -q "a1" output 
grep -q "a2" output 
grep -q "b" output 
grep -q "c" output 
grep -q "d" output

# test bindings
init_test_repo
cd $test_repo_path

echo "popper-at-HOME" > "$HOME/popperfile"
echo "popper-at-WORKSPACE" > "./popperfile"

mkdir -p docker-helloworld

cat <<EOF > docker-helloworld/Dockerfile
FROM alpine:3.9
ENTRYPOINT ["echo", "'hello world!'"]
EOF

if [ "$RUNTIME" == "docker" ]; then

cat <<EOF > main.workflow
workflow "test bindings" {
  resolves = [
    "did",
    "ws",
    "home"
  ]
}
action "did" {
  uses = "actions/docker/cli@master"
  args = "build -t helloworld docker-helloworld"
}
action "ws" {
  uses = "actions/bin/sh@master"
  runs = ["sh", "-c", "cat \$GITHUB_WORKSPACE/popperfile"]
}
action "home" {
  uses = "actions/bin/sh@master"
  runs = ["sh", "-c", "cat \$HOME/popperfile"]
}
EOF

else

cat <<EOF > main.workflow
workflow "test bindings" {
  resolves = [
    "ws",
    "home"
  ]
}
action "ws" {
  uses = "actions/bin/sh@master"
  runs = ["sh", "-c", "cat \$GITHUB_WORKSPACE/popperfile"]
}
action "home" {
  uses = "actions/bin/sh@master"
  runs = ["sh", "-c", "cat \$HOME/popperfile"]
}
EOF

fi

popper run --runtime "$RUNTIME"

rm "$HOME/popperfile" ./popperfile

# test deeply nested action directories
init_test_repo
cd $test_repo_path

cat <<EOF > main.workflow
workflow "test deeply nested action" {
  resolves = ["test"]
}

action "test" {
  uses = "jayjeetatgithub/sample-action/l1/l2/l3/l4/sh@master"
  args = ["ls"]
}
EOF

popper run --runtime "$RUNTIME" > output
grep -q "Successfully ran 'ls'" output

# test on-failure flag
init_test_repo
cd $test_repo_path

cat <<EOF > main.workflow
workflow "test-on-failure" {
  resolves = ["test"]
}

action "test" {
  uses = "sh"
  args = ["lss"]
}

action "cleanup" {
  uses = "sh"
  args = ["echo", "Cleaning up..."]
}
EOF

# test action fails, cleanup runs successfully.
popper run --on-failure cleanup --runtime "$RUNTIME" > output
grep -q "Cleaning up..." output

# test action fails, clean action couldnt be found.
! popper run --on-failure clean --runtime "$RUNTIME"

cat <<EOF > main.workflow
workflow "test-on-failure" {
  resolves = ["test"]
}

action "test" {
  uses = "sh"
  args = ["lss"]
}

action "cleanup" {
  uses = "sh"
  args = ["echdo", "Cleaning up..."]
}
EOF

# test action fails, cleanup action also fails.
! popper run --on-failure cleanup --runtime "$RUNTIME"

cat <<EOF > main.workflow
workflow "test-on-failure" {
  resolves = ["test"]
}

action "test" {
  uses = "sh"
  args = ["lss"]
}

action "cleanup" {
  uses = "sh"
  args = ["echo", "Cleaning up..."]
}
EOF

# test action fails, no --on-failure cleanup action.
! popper run --runtime "$RUNTIME"

cat <<EOF > main.workflow
workflow "test-on-failure" {
  resolves = ["test"]
}

action "test" {
  uses = "sh"
  args = ["ls", "-ltr"]
}

action "cleanup" {
  uses = "sh"
  args = ["echo", "Cleaning up..."]
}
EOF

# test action runs sucessfully, cleanup action in not triggered
popper run --on-failure cleanup --runtime "$RUNTIME" > output
! grep -q "Cleaning up..." output

# test prevention of double cloning of actions, instantiation of runners etc.
cat <<EOF > main.workflow
workflow "sample" {
  resolves = ["test"]
}

action "test" {
  uses = "actions/npm@master"
  args = ["--verssion"]
}

action "cleanup" {
  uses = "actions/bin/sh@master"
  args = ["echo Cleaning up..."]
}
EOF

popper run --on-failure cleanup --runtime "$RUNTIME"

cat <<EOF > main.workflow
workflow "sample" {
  resolves = ["test1"]
}

action "test1" {
  uses = "actions/npm@master"
  args = ["--version"]
}

action "test2" {
  uses = "actions/bin/sh@master"
  args = ["echo Cleaning up..."]
}
EOF

popper run --runtime "$RUNTIME" > output
grep -q "https://github.com/actions/npm@master" output
! grep -q "https://github.com/actions/bin@master" output

cat <<EOF > main.workflow
workflow "sample" {
  resolves = ["test1", "test2"]
}

action "test1" {
  uses = "actions/npm@master"
  args = ["--version"]
}

action "test2" {
  uses = "actions/bin/sh@master"
  args = ["echo Cleaning up..."]
}
EOF

popper run --skip test1 --runtime "$RUNTIME" > output
! grep -q "https://github.com/actions/npm@master" output
grep -q "https://github.com/actions/bin@master" output

# Test environment variables
cat <<EOF > main.workflow
workflow "foo" {
  resolves = ["show workspace in container", "show workspace in host"]
}

action "show workspace in container" {
  uses = "actions/bin/sh@master"
  args = ["echo \$GITHUB_WORKSPACE"]
}

action "show workspace in host" {
  uses = "sh"
  args = ["echo \$GITHUB_WORKSPACE"]
}
EOF

popper run --runtime "$RUNTIME" > output
count=$(grep -wc "/tmp/mypaper" output)
test "$count" -eq 2

echo "Test ACTIONS-DEMO passed."