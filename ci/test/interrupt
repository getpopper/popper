#!/bin/bash
set -ex
# shellcheck source=./ci/test/common
source ./common
init_test_repo
cd "$test_repo_path"

# Fetch the version of python
PY_VERSION=$( (python --version) 2>&1)


##############################
# DockerRunner - Serial
##############################

cat <<EOF > main.workflow
workflow "test" {
  resolves = ["sleep"]
}
action "sleep" {
  uses = "docker://busybox"
  args = ["sleep", "360"]
}
EOF

send_sigint 'popper run' 5

# give popper some time to remove containers
sleep 5

# ensure no containers are running
test -z "$(docker ps -aq --filter 'status=running')"


##############################
#DockerRunner - Parallel
##############################

if [[ $PY_VERSION != *"Python 2.7"* ]]; then

cat <<EOF > main.workflow
workflow "test" {
  resolves = ["sleep"]
}

action "sleep1" {
  uses = "docker://busybox"
  args = ["sleep", "360"]
}

action "sleep2" {
  uses = "docker://busybox"
  args = ["sleep", "360"]
}

action "sleep3" {
  uses = "docker://busybox"
  args = ["sleep", "360"]
}

action "sleep4" {
  uses = "docker://busybox"
  args = ["sleep", "360"]
}

action "sleep5" {
  uses = "docker://busybox"
  args = ["sleep", "360"]
}

action "sleep" {
  uses = "docker://busybox"
  args = ["sleep", "360"]
  needs = [
    "sleep1",
    "sleep2",
    "sleep3",
    "sleep4",
    "sleep5"
  ]
}
EOF

send_sigint 'popper run --parallel' 2

sleep 30

test -z "$(docker ps -aq --filter 'status=running')"

fi


#########################
# HostRunner - Serial
#########################

mkdir -p actions/sleep

cat <<EOF > actions/sleep/entrypoint.sh
#!/bin/bash
sleep \$@
EOF

chmod +x actions/sleep/entrypoint.sh

cat <<EOF > main.workflow
workflow "test" {
  resolves = ["sleep"]
}

action "sleep" {
  uses = "./actions/sleep"
  args = "360"
}
EOF

send_sigint 'popper run' 5

sleep 5

ps aux > running_procs
test "$(grep -c sleep running_procs)" -eq 0
rm running_procs


##############################
# HostRunner - Parallel
##############################
if [[ $PY_VERSION != *"Python 2.7"* ]]; then

mkdir -p actions/sleep

cat <<EOF > actions/sleep/entrypoint.sh
#!/bin/bash
sleep \$@
EOF

chmod +x actions/sleep/entrypoint.sh

cat <<EOF > main.workflow
workflow "test" {
 resolves = ["sleep"]
}

action "sleep1" {
 uses = "./actions/sleep"
 args = "360"
}

action "sleep2" {
 uses = "./actions/sleep"
 args = "360"
}

action "sleep3" {
 uses = "./actions/sleep"
 args = "360"
}

action "sleep4" {
 uses = "./actions/sleep"
 args = "360"
}

action "sleep5" {
 uses = "./actions/sleep"
 args = "360"
}

action "sleep" {
 uses = "./actions/sleep"
 args = "360"
 needs = [
   "sleep1",
   "sleep2",
   "sleep3",
   "sleep4",
   "sleep5"
 ]
}
EOF

send_sigint 'popper run --parallel' 15

sleep 5

ps aux > running_procs
test "$(grep -c sleep running_procs)" -eq 0
rm running_procs

fi

###############################
# SingularityRunner - Serial
###############################

mkdir -p actions/example

export SECRET_KEY=1234

cat <<EOF > actions/example/Singularity
Bootstrap: docker
From: ubuntu:14.04

%runscript
echo 'Entered runscript'
echo \$F_NAME
echo \$L_NAME
echo \$SECRET_KEY
sh -c \$@
EOF

cat <<EOF > main.workflow
workflow "test" {
  resolves = ["custom action"]
}

action "shub action" {
  uses = "shub://singularityhub/centos"
  runs = ["sleep", "360"]
}

action "public action" {
  uses = "JayjeetAtGithub/actions-demo/wget@master"
  args = ["github.com"]
}

action "custom action" {
  uses = "./actions/example"
  args = ["ls", "-al"]
  secrets = ["SECRET_KEY"]
  env = {
    F_NAME = "first_name",
    L_NAME = "last_name"
  }
  needs = [
    "shub action",
    "public action"
  ]
}
EOF

send_sigint 'popper run' 2

sleep 5

test -z "$(singularity instance list | tail -n +2)"

###############################
# SingularityRunner - Parallel
###############################

if [[ $PY_VERSION != *"Python 2.7"* ]]; then

cat <<EOF > main.workflow
workflow "test" {
  resolves = ["sleep"]
}

action "sleep1" {
  uses = "shub://singularityhub/centos"
  runs = ["sleep", "60"]
}

action "sleep2" {
  uses = "shub://singularityhub/centos"
  runs = ["sleep", "60"]
}

action "sleep3" {
  uses = "shub://singularityhub/centos"
  runs = ["sleep", "60"]
}

action "sleep4" {
  uses = "shub://singularityhub/centos"
  runs = ["sleep", "60"]
}

action "sleep5" {
  uses = "shub://singularityhub/centos"
  runs = ["sleep", "60"]
}

action "sleep" {
  uses = "shub://singularityhub/centos"
  runs = ["sleep", "60"]
  needs = [
    "sleep1",
    "sleep2",
    "sleep3",
    "sleep4",
    "sleep5"
  ]
}
EOF

send_sigint 'popper run --parallel' 5

sleep 10

test -z "$(singularity instance list | tail -n +2)"
fi

echo "Interrupt test ran successfully !"
