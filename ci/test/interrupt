#!/bin/bash
set -ex

source ./common
init_test_repo
cd $test_repo_path

#################
# serial test for dockerrunner

cat <<EOF > main.workflow
workflow "test" {
  resolves = ["sleep"]
}
action "sleep" {
  uses = "docker://busybox"
  args = "sleep 360"
}
EOF

popper run &
pid=$!

# give popper some time to create containers
sleep 15

# -2 is for SIGINT or Ctrl-C
kill -2 $pid

# give popper some time to remove containers
sleep 5

# ensure no containers are running
test -z "$(docker ps -aq --filter 'status=running')"

#################
# parallel for dockerrunner

# TODO: remove conditional to reproduce #588
# {
PY_VERSION=$( (python --version) 2>&1)

if [[ $PY_VERSION != *"Python 2.7"* ]]; then

cat <<EOF > main.workflow
workflow "test" {
  resolves = ["sleep"]
}

action "sleep1" {
  uses = "docker://busybox"
  args = ["sleep 360"]
}

action "sleep2" {
  uses = "docker://busybox"
  args = ["sleep 360"]
}

action "sleep3" {
  uses = "docker://busybox"
  args = ["sleep 360"]
}

action "sleep4" {
  uses = "docker://busybox"
  args = ["sleep 360"]
}

action "sleep5" {
  uses = "docker://busybox"
  args = ["sleep 360"]
}

action "sleep" {
  uses = "docker://busybox"
  args = ["sleep 360"]
  needs = [
    "sleep1",
    "sleep2",
    "sleep3",
    "sleep4",
    "sleep5"
  ]
}
EOF

popper run --parallel &
pid=$!

# give popper some time to create containers
sleep 20

# -2 is for SIGINT or Ctrl-C
kill -2 $pid

# give popper some time to remove containers
sleep 30

test -z "$(docker ps -aq --filter 'status=running')"

# }
fi

#################
# hostrunner actions

mkdir -p actions/sleep

cat <<EOF > actions/sleep/entrypoint.sh
#!/bin/bash
sleep \$@
EOF

chmod +x actions/sleep/entrypoint.sh

cat <<EOF > main.workflow
workflow "test" {
  resolves = ["sleep"]
}

action "sleep" {
  uses = "./actions/sleep"
  args = "360"
}
EOF

popper run &
pid=$!

# give popper some time to start processes
sleep 5

# -2 is for SIGINT or Ctrl-C
kill -2 $pid

sleep 5

ps aux > running_procs
! cat running_procs | grep sleep
rm running_procs

#################
# --parallel run on hostrunner

# TODO: uncomment to reproduce #587 and #588
# {
#
#mkdir -p actions/sleep
#
#cat <<EOF > main.workflow
#workflow "test" {
#  resolves = ["sleep"]
#}
#
#action "sleep1" {
#  uses = "./actions/sleep"
#  args = "360"
#}
#
#action "sleep2" {
#  uses = "./actions/sleep"
#  args = "360"
#}
#
#action "sleep3" {
#  uses = "./actions/sleep"
#  args = "360"
#}
#
#action "sleep4" {
#  uses = "./actions/sleep"
#  args = "360"
#}
#
#action "sleep5" {
#  uses = "./actions/sleep"
#  args = "360"
#}
#
#action "sleep" {
#  uses = "./actions/sleep"
#  args = "360"
#  needs = [
#    "sleep1",
#    "sleep2",
#    "sleep3",
#    "sleep4",
#    "sleep5"
#  ]
#}
#EOF
#
#popper run --parallel &
#pid=$!
#
## give popper some time to start processes
#sleep 15
#
## -2 is for SIGINT or Ctrl-C
#kill -2 $pid
#
#sleep 5
#
#ps aux > running_procs
#! cat running_procs | grep sleep
#rm running_procs
# }
